(window['webpackJsonp'] = window['webpackJsonp'] || []).push([['chunk-d1c6ee30'], { '0246': function (e, t, a) {}, '21a3': function (e, t, a) { 'use strict'; var o = a('0246'), n = a.n(o); n.a }, '992f': function (e, t, a) { 'use strict'; a.r(t); var o = function () { var e = this, t = e.$createElement, a = e._self._c || t; return a('div', { staticClass: 'CreateRoom' }, [a('br'), a('v-snackbar', { attrs: { color: e.alertColor, timeout: '6000', top: '', right: '' }, scopedSlots: e._u([{ key: 'action', fn: function (t) { var o = t.attrs; return [a('v-btn', e._b({ attrs: { dark: '', text: '' }, on: { click: function (t) { e.snackbar = !1 } } }, 'v-btn', o, !1), [e._v('Close')])] } }]), model: { value: e.snackbar, callback: function (t) { e.snackbar = t }, expression: 'snackbar' } }, [e._v('\n    ' + e._s(e.alertText) + '\n    ')]), a('v-overlay', { attrs: { value: e.isLoading, opacity: '0.20' } }, [a('v-progress-circular', { attrs: { size: 100, width: 7, color: 'indigo', indeterminate: '' } })], 1), e.permanentRoomID === '' ? a('div', [a('br'), a('v-container', { staticClass: 'fill-height', attrs: { fluid: '' } }, [a('v-row', { attrs: { align: 'center', justify: 'center' } }, [a('v-col', { attrs: { cols: '12', sm: '8', md: '4' } }, [a('v-card', { staticClass: 'elevation-12' }, [a('v-toolbar', { staticClass: 'elevation-6', attrs: { color: 'primary', dark: '', flat: '' } }, [a('v-toolbar-title', [e._v('CREATE/ENTER ROOM')])], 1), a('v-card-text', [a('v-form', [a('v-text-field', { attrs: { label: 'Room Creator Name', name: 'name', 'prepend-icon': 'mdi-account', type: 'text', rules: [function () { return !!e.pName || 'this field is required' }], required: '' }, model: { value: e.pName, callback: function (t) { e.pName = t }, expression: 'pName' } }), a('br'), a('h3', [e._v('OR')]), a('br'), a('v-text-field', { attrs: { label: 'Enter Existing Room', name: 'roomId', hint: '(Leave empty to create new room ID)', 'persistent-hint': !0, 'prepend-icon': 'mdi-numeric', type: 'text' }, model: { value: e.roomId, callback: function (t) { e.roomId = t }, expression: 'roomId' } })], 1)], 1), a('v-card-action', [a('v-spacer'), a('v-btn', { attrs: { color: 'primary', disabled: e.allOkay }, on: { click: function (t) { return e.sendCreatorData() } } }, [e._v('Create/Enter Room')])], 1)], 1)], 1)], 1)], 1)], 1) : a('div', [a('v-toolbar', { staticStyle: { 'padding-top': '5px' }, attrs: { dense: '', flat: '' } }, [a('h4', [e._v('Room ID-')]), a('v-btn', { staticClass: 'ma-2', attrs: { tile: '', outlined: '', color: 'black' }, on: { click: function (t) { return e.copyToClipBoard() } } }, [e._v('\n        ' + e._s(e.permanentRoomID) + '\n        '), a('v-icon', { attrs: { right: '' } }, [e._v('mdi-checkbox-multiple-blank-outline')])], 1), e.copiedVal ? a('h5', [e._v('Copied!')]) : e._e(), a('v-spacer'), a('v-btn', { on: { click: function (t) { return e.togglePolling() } } }, [e._v('\n        ' + e._s(e.estimateToggle) + '\n      ')])], 1), e.showPollingList ? a('div', { staticStyle: { 'padding-left': '15px' } }, [a('br'), a('h4', [e._v('Participants who have submitted their estimates -')]), a('br'), a('ul', e._l(e.currentUserList, function (t, o) { return a('li', { key: o }, [e._v('\n          ' + e._s(t) + '\n        ')]) }), 0)]) : e._e(), e.tableData ? a('div', [a('br'), a('h2', { staticClass: 'deep-purple darken-3', staticStyle: { color: 'white padding-left: 5px padding-right: 5px' } }, [a('center', [e._v("\n          '" + e._s(e.estimatorSelected) + "' please tell why you gave '" + e._s(e.estimateSelected) + "' as estimate\n        ")])], 1), a('br'), a('h2', [a('center', [e._v('Table containing all participants estimate')])], 1), a('v-data-table', { staticClass: 'elevation-1', attrs: { headers: e.headers, items: e.attendees, 'item-key': 'name' } })], 1) : e._e()], 1)], 1) }, n = [], r = a('bc3a'), i = a.n(r), l = { createRoom: function (e) { return new Promise(function (resolve, reject) { i.a.post('/planningPoker/createRoom', e).then(function (e) { t(e.data) }, function (e) { a(e) }) }) }, togglePolling: function (e) { return new Promise(function (resolve, reject) { i.a.post('/planningPoker/togglePolling', e).then(function (e) { t(e.data) }, function (e) { a(e) }) }) }, getCurrUsers: function (e) { return new Promise(function (resolve, reject) { i.a.post('/planningPoker/checkParticipants', e).then(function (e) { t(e.data) }, function (e) { a(e) }) }) } }, s = { name: 'CreateRoom', watch: { pName: function (e) { this.allOkay = e === '' } }, data: function () { return { isLoading: !1, roomId: '', pName: '', alertColor: 'info', snackbar: !1, alertText: '', allOkay: !0, permanentRoomID: '', pollingToggle: !1, estimateToggle: '', tableData: !1, currentUserList: [], headers: [{ text: 'Participant Name', align: 'start', value: 'name' }, { text: 'Estimate Given', value: 'estimate' }], attendees: [], estimatorSelected: '', estimateSelected: '', copiedVal: !1, showPollingList: !1 } }, methods: { sendCreatorData: function () { var e = {}; e['uuid'] = this.roomId, e['name'] = this.pName, e['datetime'] = (new Date()).toLocaleString(), this.isLoading = !0; var t = this; l.createRoom(e).then(function (e) { e.uuid === '1' ? (t.alertColor = 'error', t.alertText = 'Room ID does not exist!') : (t.alertColor = 'success', t.alertText = 'Successfully room created/entered.', t.permanentRoomID = e.uuid, t.pollingToggle = e.polling, t.estimateToggleValue(e.polling)), t.snackbar = !0, t.isLoading = !1 }, function () { t.alertColor = 'error', t.alertText = 'Error occurred, reload Page!', t.snackbar = !0, t.isLoading = !1 }) }, estimateToggleValue: function (e) { this.estimateToggle = e ? 'Close polling and get estimates' : 'New Polling' }, polledUsers: function () { var e = {}; e['uuid'] = this.permanentRoomID; var t = this; l.getCurrUsers(e).then(function (e) { t.currentUserList = e, t.currentUserList ? setTimeout(t.polledUsers(), 15e4) : t.currentUserList = [] }) }, copyToClipBoard: function () { var e = document.createElement('textarea'); document.body.appendChild(e), e.value = this.permanentRoomID, e.select(), document.execCommand('copy'), document.removeChild(e), this.alertColor = 'success', this.alertText = 'Room ID copied successfully.', this.snackbar = !0, this.copiedVal = !0 }, togglePolling: function () { this.tableData = !1, this.isLoading = !0; var e = {}; e['uuid'] = this.permanentRoomID, e['polling'] = !this.pollingToggle, this.isLoading = !0; var t = this; l.togglePolling(e).then(function (e) { e === 0 ? (t.alertColor = 'error', t.alertText = 'Room ID does not exist!') : e === 1 ? (t.showPollingList = !0, t.polledUsers(), t.pollingToggle = !t.pollingToggle, t.estimateToggleValue(t.pollingToggle), t.alertColor = 'success', t.alertText = 'Polling started successfully.') : (t.showPollingList = !1, t.attendees = e.attendees, t.estimatorSelected = e.topPeople[Math.floor(Math.random() * e.topPeople.length)], t.estimateSelected = e.topEstimate, t.pollingToggle = !t.pollingToggle, t.estimateToggleValue(t.pollingToggle), t.tableData = !0, t.alertColor = 'success', t.alertText = 'Polling stopped successfully.'), t.snackbar = !0, t.isLoading = !1 }, function () { t.alertColor = 'error', t.alertText = 'Error occurred, reload Page!', t.snackbar = !0, t.isLoading = !1 }) } } }, c = s, d = (a('21a3'), a('2877')), u = Object(d['a'])(c, o, n, !1, null, '3afa49dc', null); t['default'] = u.exports } }])
// # sourceMappingURL=chunk-d1c6ee30.30194015.js.map
